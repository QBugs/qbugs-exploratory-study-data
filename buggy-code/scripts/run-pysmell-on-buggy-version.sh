#!/usr/bin/env bash
#
# ------------------------------------------------------------------------------
# This script runs, by default, [PySmell](https://github.com/QBugs/PySmell) on
# the buggy version of each bug listed in ../../subjects/data/generated/bugs-in-quantum-computing-platforms.csv
# writes PySmell's output to the provided output file.
#
# Usage:
# run-pysmell-on-buggy-version.sh
#   [--bugs_file_path <path, e.g., ../../subjects/data/generated/bugs-in-quantum-computing-platforms.csv>]
#   --output_dir_path <path, e.g., ../data/generated/pysmell-on-buggy-version>
#   [help]
# ------------------------------------------------------------------------------

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
source "$SCRIPT_DIR/../../utils/scripts/utils.sh" || exit 1

# ------------------------------------------------------------------------- Args

USAGE="Usage: ${BASH_SOURCE[0]} [--bugs_file_path <path, e.g., ../../subjects/data/generated/bugs-in-quantum-computing-platforms.csv>] --output_dir_path <path, e.g., ../data/generated/pysmell-on-buggy-version> [help]"
if [ "$#" -ne "1" ] && [ "$#" -ne "2" ] && [ "$#" -ne "4" ]; then
  die "$USAGE"
fi

# "id","type","project_full_name","fix_commit_hash","component","symptom","bug_pattern","complexity","project_clone_url"
# e.g.,
# "1","Classical","Qiskit/qiskit-ignis","ec1b4ce759f1fb8ba0242dd6c4a309fa1b586666","Quantum State Evaluation","Crash - OS/PL Error, Crash","Missing Error Handling","19","https://github.com/Qiskit/qiskit-ignis.git"
BUGS_FILE_PATH="$SCRIPT_DIR/../../subjects/data/generated/bugs-in-quantum-computing-platforms.csv"
OUTPUT_DIR_PATH=""

while [[ "$1" = --* ]]; do
  OPTION=$1; shift
  case $OPTION in
    (--bugs_file_path)
      BUGS_FILE_PATH=$1;
      shift;;
    (--output_dir_path)
      OUTPUT_DIR_PATH=$1;
      shift;;
    (--help)
      echo "$USAGE"
      exit 0
    (*)
      die "$USAGE";;
  esac
done

# Check whether all arguments have been initialized
[ "$BUGS_FILE_PATH" != "" ]  || die "[ERROR] Missing --bugs_file_path argument!"
[ "$OUTPUT_DIR_PATH" != "" ] || die "[ERROR] Missing --output_dir_path argument!"
# Check whether all arguments exist
[ -s "$BUGS_FILE_PATH" ]     || die "[ERROR] $BUGS_FILE_PATH does not exist or it is empty!"
# Remove the output_dir_path (if any) and create a new one
rm -f "$OUTPUT_DIR_PATH"
mkdir -p "$OUTPUT_DIR_PATH"

# ------------------------------------------------------------------------- Main

TMP_DIR="/tmp/$USER-$$-$(echo $RANDOM | md5sum | cut -f1 -d' ')"
rm -rf "$TMP_DIR"; mkdir "$TMP_DIR"

# [GNU Parallel](https://www.gnu.org/software/parallel) jobs file, if available
jobs_file="$TMP_DIR/gnu-parallel-jobs.txt"
rm -f "$jobs_file"

while read -r row; do
  project_full_name=$(echo "$row" | cut -f3 -d',' | tr -d '"')
  project_clone_url=$(echo "$row" | cut -f9 -d',' | tr -d '"')
    fix_commit_hash=$(echo "$row" | cut -f4 -d',' | tr -d '"')

  project_repository_dir_path="$TMP_DIR/$project_full_name"
  mkdir -p "$project_repository_dir_path"

  # Get project
  git clone "$project_clone_url" "$project_repository_dir_path" || die "[ERROR] Failed to clone $project_full_name to $project_repository_dir_path!"

  # Get buggy version
  pushd . > /dev/null 2>&1
  cd "$project_repository_dir_path"
    # Find buggy version, i.e., parent of fixed version
    bug_commit_hash=$(git log --pretty=%P -n 1 "$fix_commit_hash")

    # Switch to buggy version
    git checkout "$bug_commit_hash" || die "[ERROR] Commit '$bug_commit_hash' not found!"
  popd > /dev/null 2>&1

  project_output_data_dir_path="$OUTPUT_DIR_PATH/$project_full_name"
  mkdir -p "$project_output_data_dir_path"

  project_pysmell_data_file="$OUTPUT_DIR_PATH/$project_full_name/smells.csv"
   project_pysmell_log_file="$OUTPUT_DIR_PATH/$project_full_name/pysmell.log"

  echo "bash \"$SCRIPT_DIR/run-pysmell-on-directory.sh\" \
    --directory_path \"$project_repository_dir_path\" \
    --output_file_path \"$project_pysmell_data_file\" > \"$project_pysmell_log_file\" 2>&1 || die \"[ERROR] Failed to run $SCRIPT_DIR/run-pysmell-on-directory.sh on $project_full_name!\"" >> "$jobs_file"
done < <(tail -n +2 "$BUGS_FILE_PATH")

# Run jobs in parallel in case [GNU Parallel](https://www.gnu.org/software/parallel)
# is available
if man parallel > /dev/null 2>&1; then
  parallel --progress -j $(cat /proc/cpuinfo | grep 'cpu cores' | sort -u | cut -f2 -d':' | cut -f2 -d' ') -a "$jobs_file" || die "[ERROR] Failed to run all jobs in $jobs_file using GNU Parallel!"
else
  while read -r job; do
    echo "[DEBUG] Running $job"
    bash $(echo "$job" | sed 's/^bash //') || die "[ERROR] Failed to run $job!"
  done < <(cat "$jobs_file")
fi

# Collect all data generated by [PySmell](https://github.com/QBugs/PySmell) for
# all projects in a single file
find "$OUTPUT_DIR_PATH" -type f -name "smells.csv" | head -n1 | xargs head -n1 > "$OUTPUT_DIR_PATH/smells.csv"
find "$OUTPUT_DIR_PATH" -type f -name "smells.csv" -exec tail -n1 {} \;       >> "$OUTPUT_DIR_PATH/smells.csv"
[ -s "$OUTPUT_DIR_PATH/smells.csv" ] || die "[ERROR] $OUTPUT_DIR_PATH/smells.csv does not exist or it is empty!"

echo "DONE!"
exit 0

# EOF
